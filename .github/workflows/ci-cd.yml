name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Secret Scanning
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    # Static Code Analysis - Security
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
    
    # Dependency Security Check
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload Safety Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-dependency-report
        path: safety-report.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Code Formatting Check
    - name: Check code formatting with Black
      run: |
        black --check --diff .
    
    # Linting
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.9'
      with:
        name: coverage-report
        path: htmlcov/

  # Advanced Security Analysis with CodeQL
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: test
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, codeql-analysis]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create application package
      run: |
        mkdir -p dist
        cp app.py dist/
        cp requirements.txt dist/
        tar -czf task-api-${{ github.sha }}.tar.gz dist/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: application-package
        path: task-api-${{ github.sha }}.tar.gz

  # Container Security Scan (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t task-api:${{ github.sha }} .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'task-api:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment (Optional)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: application-package
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Application package: task-api-${{ github.sha }}.tar.gz"
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/ or terraform apply
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here
        # Example: curl -f http://staging.example.com/health

  # Security Report Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, codeql-analysis]
    if: always()
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: bandit-security-report
    
    - name: Download dependency reports
      uses: actions/download-artifact@v3
      with:
        name: safety-dependency-report
    
    - name: Generate security summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Bandit Security Scan" >> $GITHUB_STEP_SUMMARY
        if [ -f bandit-report.json ]; then
          echo "✅ Bandit scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Bandit scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Dependency Security Check" >> $GITHUB_STEP_SUMMARY
        if [ -f safety-report.json ]; then
          echo "✅ Safety check completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Safety check failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### CodeQL Analysis" >> $GITHUB_STEP_SUMMARY
        echo "✅ CodeQL security analysis completed" >> $GITHUB_STEP_SUMMARY
